# Xilinx Parallel Cable III 'DLC 5' (and various clones)
# Telnet=4444, GDB=3333

interface parport
parport_port 0x378
parport_cable dlc5
adapter_khz 600


# bcm6348.cfg - originally

jtag   newtap bcm63168a cpu -irlen 5 -ircapture 0x1 -irmask 0x1f -expected-id 0x8631617F
# -disable
target create bcm63168a.cpu mips_m4k -endian big -chain-position bcm63168a.cpu
jtag   newtap bcm63168b cpu -irlen 5 -ircapture 0x1 -irmask 0x1f -expected-id 0x8631617F
target create bcm63168b.cpu mips_m4k -endian big -chain-position bcm63168b.cpu
jtag   newtap bcm63168c cpu -irlen 5 -ircapture 0x1 -irmask 0x1f -expected-id 0x8631617F
target create bcm63168c.cpu mips_m4k -endian big -chain-position bcm63168c.cpu
jtag   newtap bcm63168d cpu -irlen 5 -ircapture 0x1 -irmask 0x1f -expected-id 0x8631617F
target create bcm63168d.cpu mips_m4k -endian big -chain-position bcm63168d.cpu
#jtag   newtap bcm63168e cpu -irlen 25 -ircapture 0x100000 -irmask 0x1f00000 -expected-id 0x8631617F
jtag   newtap bcm63168e cpu -irlen 5 -ircapture 0x1 -irmask 0x1f -expected-id 0x8631617F
target create bcm63168e.cpu mips_m4k -endian big -chain-position bcm63168e.cpu


# Anything below this line does not work/needed, and it is only for testing


proc dump_flash {} {
	bcm63168e.cpu arp_halt
	# 0x6## = Addr/Dummy Bytes,   0x#0C = 4 Byte Read Op
	bcm63168e.cpu mww 0xb0001014 0x60c
	
#	bcm63168e.cpu mww 0xb0001018 0x0
#	dump_image flash-00MB.BIN 0xB8000000 0x100000
	
	for {set i 0} {$i < 0x2000000} {set i [expr $i + 0x100000]}
	{
		bcm63168e.cpu mww 0xb0001018 $i
		dump_image flash-$i-MB.BIN [expr $i + 0xB8000000] 0x100000
		#if {[uplevel 1 $expression] == 0} { return }
	}
	
#	return -code 1 "Errrmmm"	
}


proc burn_bootloader {} {
	bcm63168e.cpu arp_halt
	bcm63168e.cpu mww 0xb0001014 0x60c
	bcm63168e.cpu mem2array ramie1 32 0xb00000c0 4
	bcm63168e.cpu mem2array ramie2 32 0xb0001800 0xC
	bcm63168e.cpu mem2array ramie3 32 0xbfa0001c 1
	bcm63168e.cpu mem2array ramie4 32 0xbfa00020 1
	
#	set foop(0) 0
#	mem2array foop 32 0xb0000000 1
#	echo $foop(0)
	
	bcm63168e.cpu mdw 0xb000181c
	bcm63168e.cpu mww 0xb000181c 0xAF0024	, ( bus_read( bus, 0xb000181c ) & 0xFFFCFF00 ) | 0x30024 );
	bcm63168e.cpu mdw 0xb0001820
	bcm63168e.cpu mww 0xb0001820 0x0FA7D	, ( bus_read( bus, 0xb0001820 ) & 0xFFFC0000 ) | 0x0FA7D );
	bcm63168e.cpu mdw 0xb0001824
	bcm63168e.cpu mww 0xb0001824 0x0000008A	,   bus_read( bus, 0xb0001824 ) | 0x00000080 );
	bcm63168e.cpu mdw 0xb000181c
	bcm63168e.cpu mww 0xb000181c 0x80AF0011	,   bus_read( bus, 0xb000181c ) | 0x80000000 ); // Back again
#	bcm63168e.cpu mdw 0xb0001800
#	bcm63168e.cpu mww 0xb0001800 0x7B9003E0	,   bus_read( bus, 0xb0001800 ) & 0xFFFFFFFC );
	bcm63168e.cpu mdw 0xb00000c4
	bcm63168e.cpu mww 0xb00000c4 0x4		, ( bus_read( bus, 0xb00000c4 ) & 0xFFFFFFBF ) | 0x4 ); // GPIO
#	bcm63168e.cpu mdw 0xb00000cc
#	bcm63168e.cpu mww 0xb00000cc 0xfffbde9b	,   bus_read( bus, 0xb00000cc ) & 0xFFFFFFFB );
	bcm63168e.cpu mdw 0xBFA0001C
	bcm63168e.cpu mww 0xBFA0001C 0xC0400000	,   bus_read( bus, 0xBFA0001C ) | 0xC0000000 ); // Feck knows, helps with ram
	bcm63168e.cpu mdw 0xBFA00020
	bcm63168e.cpu mww 0xBFA00020 0xFFF80001
	
#	bcm63168e.cpu mww 0xb0001018 0x0
#	dump_image flash-00MB.BIN 0xB8000000 0x100000
	
	for {set i 0} {$i < 0x2000000} {set i [expr $i + 0x100000]}
	{
		bcm63168e.cpu mww 0xb0001018 $i
		dump_image flash-$i-MB.BIN [expr $i + 0xB8000000] 0x100000
		#if {[uplevel 1 $expression] == 0} { return }
	}
	
#	return -code 1 "Errrmmm"	
}


#proc ruddy_bitz_tapdisable {} {
#	echo "Im a blue toothbrush"
#	set BYPASS 0x1F
#	irscan bcm63168a.cpu $BYPASS -endstate RUN/IDLE
#	#irscan bcm63168b.cpu $BYPASS -endstate RUN/IDLE
#	#irscan bcm63168c.cpu $BYPASS -endstate RUN/IDLE
#	#irscan bcm63168d.cpu $BYPASS -endstate RUN/IDLE
#	#drscan bcm63168a.cpu 99 0
#	runtest 20
#}

#jtag configure bcm63168a.cpu -event tap-enable ""
## jtag tapdisable bcm63168a.cpu
#jtag configure bcm63168a.cpu -event tap-disable "ruddy_bitz_tapdisable"


#bcm63168e.cpu configure -work-area-phys 0x80600000 -work-area-size 0x100000 -work-area-backup 0
#flash bank floosh cfi 0x18000000 0x100000 2 2 bcm63168e.cpu

set at  1
set v0  2
set v1  3
set a0  4
set a1  5
set a2  6
set a3  7
set t0  8
set t1  9
set t2 10
set t3 11
set t4 12
set t5 13
set t6 14
set t7 15
set s0 16
set s1 17
set s2 18
set s3 19
set s4 20
set s5 21
set s6 22
set s7 23
set t8 24
set t9 25
set k0 26
set k1 27
set gp 28
set sp 29
set fp 30
set ra 31
